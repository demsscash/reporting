#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
BANKILY Generator Hub - Application Unifi√©e
Menu principal pour choisir le type de g√©n√©rateur de rapports PDF
"""

import tkinter as tk
from tkinter import ttk, messagebox
import subprocess
import sys
import os
from datetime import datetime

class BankilyGeneratorHub:
    def __init__(self, root):
        self.root = root
        self.root.title("üè¶ BANKILY Generator Hub - Centre de G√©n√©ration de Rapports")
        self.root.geometry("1200x700")  # Plus large pour 3 cartes horizontales
        self.root.configure(bg='#f0f0f0')
        self.root.resizable(True, True)
        
        # D√©finir une taille minimale
        self.root.minsize(1000, 600)
        
        # Centrer la fen√™tre
        self.center_window()
        
        # Cr√©er l'interface
        self.create_interface()
    
    def center_window(self):
        """Centre la fen√™tre sur l'√©cran"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{x}+{y}")
    
    def create_interface(self):
        """Cr√©e l'interface principale"""
        # En-t√™te principal
        self.create_header()
        
        # Section des g√©n√©rateurs
        self.create_generators_section()
        
        # Section informations
        self.create_info_section()
        
        # Pied de page
        self.create_footer()
    
    def create_header(self):
        """Cr√©e l'en-t√™te de l'application"""
        header_frame = tk.Frame(self.root, bg='#2c3e50', height=120)
        header_frame.pack(fill='x', padx=0, pady=0)
        header_frame.pack_propagate(False)
        
        # Logo et titre principal
        title_frame = tk.Frame(header_frame, bg='#2c3e50')
        title_frame.pack(expand=True, fill='both')
        
        # Titre principal
        tk.Label(
            title_frame,
            text="üè¶ BANKILY",
            font=('Arial', 28, 'bold'),
            fg='#f39c12',
            bg='#2c3e50'
        ).pack(pady=(15, 5))
        
        tk.Label(
            title_frame,
            text="Centre de G√©n√©ration de Rapports PDF",
            font=('Arial', 14),
            fg='white',
            bg='#2c3e50'
        ).pack()
        
        tk.Label(
            title_frame,
            text="Choisissez votre type de rapport",
            font=('Arial', 10, 'italic'),
            fg='#bdc3c7',
            bg='#2c3e50'
        ).pack(pady=(0, 15))
    
    def create_generators_section(self):
        """Cr√©e la section des g√©n√©rateurs"""
        main_frame = tk.Frame(self.root, bg='#f0f0f0')
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Titre de section
        tk.Label(
            main_frame,
            text="üìä Types de G√©n√©rateurs Disponibles",
            font=('Arial', 16, 'bold'),
            bg='#f0f0f0',
            fg='#2c3e50'
        ).pack(pady=(0, 20))
        
        # Container horizontal pour les cartes
        cards_container = tk.Frame(main_frame, bg='#f0f0f0')
        cards_container.pack(fill='both', expand=True, padx=10)
        
        # Configuration des colonnes pour distribution √©gale
        cards_container.grid_columnconfigure(0, weight=1)
        cards_container.grid_columnconfigure(1, weight=1) 
        cards_container.grid_columnconfigure(2, weight=1)
        
        # G√©n√©rateur Multi-Centres (colonne 0)
        centres_frame = tk.Frame(cards_container, bg='#f0f0f0')
        centres_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        
        self.create_generator_card(
            centres_frame,
            "üè¢ Multi-Centres",
            "G√©n√®re un rapport par centre g√©ographique",
            "‚Ä¢ Colonne requise: CENTRE\n‚Ä¢ Format: Relev√© commer√ßant\n‚Ä¢ Groupement par zones\n‚Ä¢ Id√©al pour analyser les performances par r√©gion",
            "#3498db",
            lambda: self.launch_generator("centres")
        )
        
        # G√©n√©rateur Multi-Commer√ßants (colonne 1)
        commercants_frame = tk.Frame(cards_container, bg='#f0f0f0')
        commercants_frame.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")
        
        self.create_generator_card(
            commercants_frame,
            "üõí Multi-Commer√ßants",
            "G√©n√®re un rapport par commer√ßant individuel",
            "‚Ä¢ Colonne requise: COMMERCANT\n‚Ä¢ Format: Relev√© commer√ßant\n‚Ä¢ Groupement par boutiques\n‚Ä¢ Parfait pour les rapports individuels de magasins",
            "#27ae60",
            lambda: self.launch_generator("commercants")
        )
        
        # G√©n√©rateur Multi-Agents (colonne 2)
        agents_frame = tk.Frame(cards_container, bg='#f0f0f0')
        agents_frame.grid(row=0, column=2, padx=10, pady=10, sticky="nsew")
        
        self.create_generator_card(
            agents_frame,
            "üë§ Multi-Agents",
            "G√©n√®re un rapport par agent BANKILY",
            "‚Ä¢ Colonne requise: CODE_AGENT\n‚Ä¢ Format: Relev√© agent\n‚Ä¢ Calcul des commissions\n‚Ä¢ Sp√©cialis√© pour les transactions d'agents",
            "#8e44ad",
            lambda: self.launch_generator("agents")
        )
    
    def create_generator_card(self, parent, title, description, details, color, command):
        """Cr√©e une carte pour un g√©n√©rateur"""
        # Frame principal de la carte - maintenant en pack pour remplir le parent
        card_frame = tk.Frame(parent, bg='white', relief='raised', bd=2)
        card_frame.pack(fill='both', expand=True)
        
        # En-t√™te de la carte
        header_frame = tk.Frame(card_frame, bg=color, height=50)
        header_frame.pack(fill='x')
        header_frame.pack_propagate(False)
        
        tk.Label(
            header_frame,
            text=title,
            font=('Arial', 12, 'bold'),
            fg='white',
            bg=color
        ).pack(expand=True)
        
        # Contenu de la carte
        content_frame = tk.Frame(card_frame, bg='white')
        content_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Description
        desc_label = tk.Label(
            content_frame,
            text=description,
            font=('Arial', 9, 'bold'),
            bg='white',
            fg='#2c3e50',
            wraplength=200,  # Ajustement du texte pour cartes plus √©troites
            justify='left'
        )
        desc_label.pack(anchor='w', pady=(0, 8))
        
        # D√©tails
        details_label = tk.Label(
            content_frame,
            text=details,
            font=('Arial', 8),
            bg='white',
            fg='#7f8c8d',
            justify='left',
            wraplength=200,  # Ajustement du texte pour cartes plus √©troites
            anchor='w'
        )
        details_label.pack(anchor='w', pady=(0, 15))
        
        # Bouton de lancement
        launch_btn = tk.Button(
            content_frame,
            text="üöÄ Lancer",
            command=command,
            bg=color,
            fg='white',
            font=('Arial', 9, 'bold'),
            relief='flat',
            padx=12,
            pady=5,
            cursor='hand2'
        )
        launch_btn.pack(anchor='center', pady=(5, 0))
        
        # Effet hover
        def on_enter(e):
            launch_btn.config(bg=self.darken_color(color))
        
        def on_leave(e):
            launch_btn.config(bg=color)
        
        launch_btn.bind("<Enter>", on_enter)
        launch_btn.bind("<Leave>", on_leave)
    
    def create_info_section(self):
        """Cr√©e la section d'informations"""
        info_frame = tk.LabelFrame(
            self.root,
            text="‚ÑπÔ∏è Informations Importantes",
            font=('Arial', 11, 'bold'),
            bg='#f0f0f0',
            fg='#2c3e50'
        )
        info_frame.pack(fill='x', padx=20, pady=(0, 15))
        
        info_text = """üìã PR√âREQUIS:
‚Ä¢ Python avec les biblioth√®ques: pandas, openpyxl, xlrd, reportlab, tkcalendar
‚Ä¢ Fichiers Excel avec les colonnes appropri√©es selon le type choisi
‚Ä¢ Logos optionnels: bpm.png et bankily.png dans le dossier de travail

üéØ FONCTIONNALIT√âS COMMUNES:
‚Ä¢ Interface graphique intuitive avec progression en temps r√©el
‚Ä¢ Export ZIP avec tous les rapports g√©n√©r√©s
‚Ä¢ Design professionnel BANKILY avec logos
‚Ä¢ Gestion d'erreurs robuste et journal d√©taill√©"""
        
        tk.Label(
            info_frame,
            text=info_text,
            font=('Arial', 9),
            bg='#f0f0f0',
            fg='#34495e',
            justify='left'
        ).pack(padx=12, pady=8, anchor='w')
    
    def create_footer(self):
        """Cr√©e le pied de page"""
        footer_frame = tk.Frame(self.root, bg='#34495e', height=50)
        footer_frame.pack(fill='x')
        footer_frame.pack_propagate(False)
        
        # Informations de version et date
        version_info = f"BANKILY Generator Hub v1.0 | {datetime.now().strftime('%Y')}"
        
        tk.Label(
            footer_frame,
            text=version_info,
            font=('Arial', 9),
            fg='#bdc3c7',
            bg='#34495e'
        ).pack(expand=True)
    
    def darken_color(self, color):
        """Assombrit une couleur pour l'effet hover"""
        color_map = {
            "#3498db": "#2980b9",
            "#27ae60": "#229954", 
            "#8e44ad": "#7d3c98"
        }
        return color_map.get(color, color)
    
    def launch_generator(self, generator_type):
        """Lance le g√©n√©rateur s√©lectionn√©"""
        try:
            # Dictionnaire des fichiers de g√©n√©rateurs
            generators = {
                "centres": "interface_multi_centres.py",
                "commercants": "interface_multi_commercants.py", 
                "agents": "interface_multi_agents.py"
            }
            
            filename = generators[generator_type]
            
            # V√©rifier si le fichier existe
            if not os.path.exists(filename):
                messagebox.showerror(
                    "Fichier non trouv√©",
                    f"Le fichier '{filename}' est introuvable.\n\n"
                    f"Assurez-vous que tous les g√©n√©rateurs sont dans le m√™me dossier que cette application."
                )
                return
            
            # Lancer le g√©n√©rateur directement sans popup
            subprocess.Popen([sys.executable, filename])
            
        except Exception as e:
            messagebox.showerror(
                "Erreur de lancement", 
                f"Impossible de lancer le g√©n√©rateur:\n{str(e)}"
            )
    
    def show_about(self):
        """Affiche la bo√Æte √Ä propos"""
        about_text = """BANKILY Generator Hub v1.0

Application unifi√©e pour la g√©n√©ration de rapports PDF BANKILY.

Fonctionnalit√©s:
‚Ä¢ 3 types de g√©n√©rateurs sp√©cialis√©s
‚Ä¢ Interface graphique moderne
‚Ä¢ Export PDF professionnel
‚Ä¢ Gestion multi-fichiers

D√©velopp√© pour BANKILY
¬© 2025 - Tous droits r√©serv√©s"""
        
        messagebox.showinfo("√Ä propos", about_text)


def check_dependencies():
    """V√©rifie les d√©pendances requises"""
    required_modules = ['pandas', 'reportlab', 'tkcalendar']
    missing_modules = []
    
    for module in required_modules:
        try:
            __import__(module)
        except ImportError:
            missing_modules.append(module)
    
    if missing_modules:
        error_msg = f"""‚ùå MODULES MANQUANTS:

Les modules suivants sont requis mais non install√©s:
{', '.join(missing_modules)}

Pour installer:
pip install {' '.join(missing_modules)} openpyxl xlrd

L'application peut fonctionner mais les g√©n√©rateurs n√©cessiteront ces modules."""
        
        messagebox.showwarning("D√©pendances manquantes", error_msg)
    
    return len(missing_modules) == 0


def main():
    """Lance l'application principale"""
    # V√©rifier les d√©pendances
    check_dependencies()
    
    # Cr√©er et lancer l'interface
    root = tk.Tk()
    app = BankilyGeneratorHub(root)
    root.mainloop()


if __name__ == "__main__":
    main()


"""
=== BANKILY GENERATOR HUB ===

Application unifi√©e qui centralise l'acc√®s aux 3 g√©n√©rateurs de rapports BANKILY.

=== STRUCTURE DU PROJET ===

Votre dossier doit contenir ces fichiers:
‚îú‚îÄ‚îÄ bankily_generator_hub.py          # ‚Üê Ce fichier (menu principal)
‚îú‚îÄ‚îÄ interface_multi_centres.py        # G√©n√©rateur centres
‚îú‚îÄ‚îÄ interface_multi_commercants.py    # G√©n√©rateur commer√ßants  
‚îú‚îÄ‚îÄ interface_multi_agents.py         # G√©n√©rateur agents
‚îú‚îÄ‚îÄ bpm.png                           # Logo BPM (optionnel)
‚îî‚îÄ‚îÄ bankily.png                       # Logo BANKILY (optionnel)

=== UTILISATION ===

1. Placez tous les fichiers dans le m√™me dossier
2. Lancez: python bankily_generator_hub.py
3. Choisissez votre type de g√©n√©rateur
4. L'interface correspondante s'ouvrira automatiquement

=== FONCTIONNALIT√âS ===

üéØ **Menu principal moderne**:
- Interface intuitive avec cartes visuelles
- Descriptions d√©taill√©es de chaque g√©n√©rateur
- Boutons de lancement directs
- Informations sur les pr√©requis

üöÄ **Lancement automatique**:
- V√©rification de l'existence des fichiers
- Ouverture des g√©n√©rateurs en sous-processus
- Messages de confirmation
- Gestion d'erreurs compl√®te

üìä **3 g√©n√©rateurs int√©gr√©s**:
- Multi-Centres (colonne CENTRE)
- Multi-Commer√ßants (colonne COMMERCANT)  
- Multi-Agents (colonne CODE_AGENT)

‚ö° **Fonctionnalit√©s avanc√©es**:
- V√©rification des d√©pendances au d√©marrage
- Interface responsive et moderne
- Effets visuels (hover, couleurs)
- Fen√™tre centr√©e automatiquement

=== AVANTAGES ===

‚úÖ **Simplicit√© d'usage**: Un seul point d'entr√©e pour tous les g√©n√©rateurs
‚úÖ **Interface moderne**: Design professionnel avec codes couleurs
‚úÖ **Robustesse**: V√©rifications et gestion d'erreurs compl√®tes
‚úÖ **Flexibilit√©**: Chaque g√©n√©rateur reste ind√©pendant
‚úÖ **Maintenance**: Centralisation des acc√®s et informations

=== INSTALLATION COMPL√àTE ===

1. **T√©l√©chargez tous les fichiers Python**:
   - bankily_generator_hub.py
   - interface_multi_centres.py
   - interface_multi_commercants.py
   - interface_multi_agents.py

2. **Installez les d√©pendances**:
   pip install pandas openpyxl xlrd reportlab tkcalendar

3. **Ajoutez les logos** (optionnel):
   - bpm.png
   - bankily.png

4. **Lancez l'application**:
   python bankily_generator_hub.py

Et voil√† ! Vous avez maintenant un centre de contr√¥le complet pour tous vos rapports BANKILY.
"""